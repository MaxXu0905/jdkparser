package com.ailk.wenda;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.OutputStreamWriter;import java.io.StringWriter;import java.io.Writer;import java.util.ArrayList;import java.util.List;import org.apache.xml.serialize.OutputFormat;import org.apache.xml.serialize.XMLSerializer;import org.exolab.castor.mapping.Mapping;import org.exolab.castor.mapping.MappingException;import org.exolab.castor.xml.MarshalException;import org.exolab.castor.xml.Marshaller;import org.exolab.castor.xml.ValidationException;/** * 选择题对象 * @author freckles */public class Selector {	String q; // 题干	List<String> a = new ArrayList<String>(); // 选项	List<String> aid = new ArrayList<String>(); // 选项对应的id，用于查找正确答案	int correctAns = -1; // 正确答案下标	String grade; // 等级	double score; // 题目分数	double total; // 得分			public String getQ() {		return q;	}	public void setQ(String q) {		this.q = q;	}	public List<String> getA() {		return a;	}	public void setA(List<String> a) {		this.a = a;	}	public List<String> getAid() {		return aid;	}	public void setAid(List<String> aid) {		this.aid = aid;	}	public int getCorrectAns() {		return correctAns;	}	public void setCorrectAns(int correctAns) {		this.correctAns = correctAns;	}	public String getGrade() {		return grade;	}	public void setGrade(String grade) {		this.grade = grade;	}	public double getScore() {		return score;	}	public void setScore(double score) {		this.score = score;	}	public double getTotal() {		return total;	}	public void setTotal(double total) {		this.total = total;	}	public Selector() {	}	public void marshal(Writer out) throws MarshalException, ValidationException, IOException, MappingException {		Mapping mapping = new Mapping();		mapping.loadMapping(this.getClass().getClassLoader().getResource("com/ailk/wenda/mapping.xml"));		OutputFormat format = new OutputFormat(org.apache.xml.serialize.Method.XML, "UTF-8", true);		String[] cndata = { "signature", "description" };		format.setCDataElements(cndata);		format.setNonEscapingElements(cndata);		XMLSerializer serializer = new XMLSerializer(out, format);		Marshaller marshaller = new Marshaller(serializer.asDocumentHandler());		marshaller.setMapping(mapping);		marshaller.marshal(this);	}	public void toXMLFile(String pre) {		OutputStreamWriter out = null;		try {			String fileName = pre + "/wenda.xml";			File dir = new File(fileName.substring(0, fileName.lastIndexOf("/")));			if (!dir.exists()) {				dir.mkdirs();			}			out = new OutputStreamWriter(new FileOutputStream(fileName), "UTF-8");			this.marshal(out);		} catch (Exception ex) {			ex.printStackTrace();		} finally {			try {				out.close();			} catch (Exception e) {			}		}	}	public String toXMLString() {		try {			StringWriter out = new StringWriter();			this.marshal(out);			return out.toString();		} catch (Exception ex) {			ex.printStackTrace();			return "";		}	}}