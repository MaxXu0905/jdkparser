package com.ailk.wenda;import java.io.BufferedReader;import java.io.DataOutputStream;import java.io.File;import java.io.FileWriter;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStream;import java.net.HttpURLConnection;import java.net.URL;import javax.swing.text.StyledEditorKit.BoldAction;import net.sf.json.JSON;import net.sf.json.JSONObject;import net.sf.json.util.JSONUtils;import org.apache.commons.lang.StringUtils;import org.htmlparser.Node;import org.htmlparser.NodeFilter;import org.htmlparser.Parser;import org.htmlparser.util.ParserException;import org.htmlparser.util.SimpleNodeIterator;import com.google.gson.Gson;public class WenDa {	private static int MAX_TRIES = 3;	private static String BR = "\n";	private static final String GET_URL = "http://wenda60.com/?exam.test/832ab595flzEY8BAcaEB0JBlYBUlRVAFMBGxcY";	private static final String SUBMIT_ANS = "http://wenda60.com/?ajax.exam.Test";	// 需要手动粘贴的内容：	private static final String COOKIE = "ssd=hrif65cnro8ujetr1atd4bipf5; 79e2a722__5e003d40e5112e90f3a3d4s_79e2a7229422cb02c3ef8ddebb10ee4c=265e2f46flzEY8TRIRWgcbDEQAVFdVBVITSRYSWlJWCkZeEApMAlEkEg5mZidYNVVwV3MEXAYJU1UBVgUMeEsiU1xxGk4QERAOFV9UAUFBAxQVWAwFR00dEhsEVgUJA1RUVAIIHBEf; v2_question=false; Hm_lvt_5e003d40e511bf5aeb58ad6aa7082189=1408019328,1408067664,1408072309; Hm_lpvt_5e003d40e511bf5aeb58ad6aa7082189=1408072342";	private static final String T_ID = "832ab595flzEY8BAcaEB0JBlYBUlRVAFMBGxcY";	private static final String FILE_NAME = "assets/wenda/c.txt";		public static void main(String[] args) throws Exception {				boolean a = true;				while (a) {			// 访问答题页面			String qContent = readContentFromGet();			// 获取页面题目信息			Selector selector = extractQInfos(qContent);			// 获取正确答案			getCorrectAns(selector);						selector.setAid(null);			String info = new Gson().toJson(selector);			System.out.println(info);						append2File(FILE_NAME, info + '\n');		}			}	private static void getCorrectAns(Selector selector) throws IOException {		/*** 模拟提交答案 ***/		StringBuilder submitData = new StringBuilder();		submitData.append("opid=").append(selector.getAid().get(0)); // 模拟选择A		submitData.append("&tid=").append(T_ID);		for (int i = 0; i < selector.getAid().size(); i++) {			submitData.append("&opids%5B%5D=").append(selector.getAid().get(i));		}		String correctInfo = readContentFromPost(SUBMIT_ANS, submitData.toString());		// 获取正确答案，等级，题目分数，得分		// "data":{"grade":"b","score":-13,"total":10,"credit":0,"upgraded":"","id":"a48033f1flzEY8BwVUBVVHFRgBUlRVAFMBVQRWSxpN"}}		JSONObject cInfo = JSONObject.fromObject(correctInfo);		if (cInfo.getInt("code") == 200) {			JSONObject infoData = cInfo.optJSONObject("data");			if(infoData != null){				selector.setGrade(infoData.optString("grade"));				selector.setScore(infoData.optDouble("score"));				selector.setTotal(infoData.optDouble("total"));				String correctAid = infoData.optString("id");				for (int i = 0; i < selector.getAid().size(); i++) {					if (correctAid.equals(selector.getAid().get(i))) {						selector.setCorrectAns(i);						break;					}				}			}		}	}	public static Selector extractQInfos(String qContent) throws ParserException {		final Selector selector = new Selector();		Parser parser = new Parser(qContent);		parser.setEncoding("utf8");		parser.extractAllNodesThatMatch(new NodeFilter() {			@Override			public boolean accept(Node node) {				// 获取等级				// <em>等级</em><b>VE</b>：都是兄弟节点//				if ("等级".equals(node.toPlainTextString())) {//					String level = getLevel(node);//					if (!StringUtils.isBlank(level)) {//						selector.setLevel(level);//					}//				}				// 获取题干				if ("p class=\"exam_info_txt\"".equals(node.getText())) {					selector.setQ(node.getChildren().toHtml());				}				// 获取选项				if (node.getText().startsWith("div class=\"exam_select\" dataid=")) {					String id = node.getText().substring(node.getText().indexOf("dataid=\"") + 8,							node.getText().length() - 1);					String a = node.getLastChild().getFirstChild().getFirstChild().getChildren().toHtml();					selector.getAid().add(id);					selector.getA().add(a);				}				return true;			}		});		return selector;	}	public static String getLevel(Node node) {		Node endEm = node.getNextSibling();		if (endEm != null) {			Node bNode = endEm.getNextSibling();			if (bNode != null) {				return bNode.getNextSibling().toPlainTextString();			}		}		return "";	}	public static Node getNextNotBRChild(Node node) {		Node next = null;		if (node == null) {			return next;		}		next = node.getNextSibling();		if (next != null) {			if (!BR.equals(next.toPlainTextString())) {				return next;			} else {				return getNextNotBRChild(next);			}		}		return next;	}	public static Node getFirstNotBRChild(Node node) {		Node child = null;		if (node == null) {			return child;		}		SimpleNodeIterator iter = node.getChildren().elements();		while (iter.hasMoreNodes()) {			child = iter.nextNode();			if (!BR.equals(child.toPlainTextString())) {				break;			}		}		return child;	}	public static String readContentFromGet() throws IOException {		URL getUrl = new URL(GET_URL);		HttpURLConnection connection = (HttpURLConnection) getUrl.openConnection();		connection.setRequestProperty("Cookie", COOKIE);		connection.connect();		BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));		StringBuilder lines = new StringBuilder();		String line = null;		while ((line = reader.readLine()) != null) {			lines.append(line.trim());		}		reader.close();		// 断开连接		connection.disconnect();		return lines.toString();	}	public static String readContentFromPost(String url, String encodedPostData) throws IOException {		URL postUrl = new URL(url);		HttpURLConnection connection = (HttpURLConnection) postUrl.openConnection();		connection.setRequestProperty("Cookie", COOKIE);		connection.setDoOutput(true);		connection.setDoInput(true);		connection.setRequestMethod("POST");		connection.setUseCaches(false);		connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");		//		connection.connect();		DataOutputStream out = new DataOutputStream(connection.getOutputStream());		out.writeBytes(encodedPostData);		out.flush();		out.close();		BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));		StringBuilder lines = new StringBuilder();		String line;		while ((line = reader.readLine()) != null) {			lines.append(line);		}		reader.close();		connection.disconnect();		return lines.toString();	}		public static void append2File(String fileName, String content) {           FileWriter writer = null;          try {                 writer = new FileWriter(fileName, true);                 writer.write(content);               } catch (IOException e) {                 e.printStackTrace();             } finally {                 try {                     if(writer != null){                      writer.close();                     }              } catch (IOException e) {                     e.printStackTrace();                 }             }       }     }